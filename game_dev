class Cell:
    #  Клетка, у которой есть значения
    #   - занята она или нет
    #   - номер клетки
    def __init__(self, status=None, num_cell=None):
        self.status = status
        self.num_cell = num_cell

    def __str__(self):
        return f'{self.status}\t'

    pass


class Board:
    #  Класс поля, который создаёт у себя экземпляры клетки
    def __init__(self):
        self.board = [[Cell('*', ord_y) for ord_y in range(3)] for ord_x in range(3)]

    def print_board(self):
        for ord_y in self.board:
            print(' '.join(map(str, ord_y)))
            # print(*cell, sep='')

    def change_value_cell(self, user, ord_y, ord_x):
        self.board[ord_y][ord_x] = user


class Player:
    #  У игрока может быть
    #   - имя
    #   - на какую клетку ходит
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol

    pass


class Game:
    # класс «Игры» содержит атрибуты:
    # состояние игры,
    # игроки,
    # поле.
    def __init__(self, condition_game, players_list, field):
        self.condition_game = condition_game
        self.players_list = players_list
        self.field = Board

    # Метод запуска одного хода игры.
    # Получает одного из игроков, запрашивает у игрока номер клетки, изменяет поле, проверяет, выиграл ли игрок.
    # Если игрок победил, возвращает True, иначе False.

    def one_step(self, player):
        player_ord_y, player_ord_x = [int(value) for value in input(f'{player.name} делает ход: ').split()]
        Board.change_value_cell(player.symbol, player_ord_y, player_ord_x)
        Board.print_board()
        if Board[p]
        pass

    def currient_session(self, player_list, player_win=False):
        Board.print_board()
        while not player_win:
            for player in player_list:
                Game.one_step(player)
        if player_win:
            print(f'Игрок победил!')
            return [[Board.change_value_cell('*', ord_y, ord_x) for ord_y in range(3)] for ord_x in range(3)]
    # Метод запуска одной игры.
    # Очищает поле, запускает цикл с игрой, который завершается победой одного из игроков или ничьей.
    # Если игра завершена, метод возвращает True, иначе False.
        pass
    def run_game(self):
# Основной метод запуска игр.
# В цикле запускает игры, запрашивая после каждой игры, хотят ли игроки продолжать играть.
# После каждой игры выводится текущий счёт игроков.
        pass
